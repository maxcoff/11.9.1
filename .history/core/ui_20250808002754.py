# core/ui.py

import sys
import io
import asyncio
from asyncio import Task
from typing import Optional, Callable, List

from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Static
from textual.widgets import Placeholder
from textual.scroll_view import ScrollView

#_______________________________________________________________________________________


class TaskStatus(Static):
    def update_status(self, task_map: dict[str, Optional[Task]]):
        parts: list[str] = []
        for name, task in task_map.items():
            if task is None:
                status = "‚ö™ not started"
            elif task.cancelled():
                status = "‚ùå cancelled"
            elif task.done():
                exc = task.exception()
                status = f"üí• error: {exc}" if exc else "‚úÖ done"
            else:
                status = "üü¢ running"
            parts.append(f"{name}: {status}")
        line = " | ".join(parts) or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
        self.update(line)


class TUIOrchestrator(App):
    """
    R ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã  
    Q ‚Äî –≤—ã—Ö–æ–¥  
    –°—Ç–∞—Ç—É—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
    """
    BINDINGS = [
        ("r", "refresh", "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã"),
        ("q", "quit",    "–í—ã—Ö–æ–¥"),
    ]
    
    CSS = """
    #task-status {
      dock: bottom;
      height: auto;
      padding: 0 2;
      content-align: right middle;
      background: $panel;
    }
    """

    def __init__(self, orchestrator):
        super().__init__()
        self.orchestrator = orchestrator
        self.status = TaskStatus(id="task-status")

    async def on_mount(self):
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await self.update_status()
        

    async def update_status(self):
        task_map = {
            "order_task":    getattr(self.orchestrator, "order_task",    None),
            "prehedge_task": getattr(self.orchestrator, "prehedge_task", None),
            "snapshot_task": getattr(self.orchestrator, "snapshot_task", None),
            "reinvest_task": getattr(self.orchestrator, "_reinvest_task", None),
            # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }
        self.status.update_status(task_map)

    async def action_refresh(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è R
        """
        await self.update_status()

    def compose(self) -> ComposeResult:
        # –¢–æ–ª—å–∫–æ —à–∞–ø–∫–∞ –∏ –ø–æ–¥–≤–∞–ª, —Å—Ç–∞—Ç—É—Å ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º –¥–æ–∫–æ–º
        yield Header()
        yield Footer()
        yield self.status


async def run_async_ui(orchestrator):
    app = TUIOrchestrator(orchestrator)
    await app.run_async()
