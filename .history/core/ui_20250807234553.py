# core/ui.py

import asyncio
from asyncio import Task
from typing import Optional

from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Static, Button
from textual.containers import Container


class TaskStatus(Static):
    def update_status(self, task_map: dict[str, Optional[Task]]):
        lines: list[str] = []
        for name, task in task_map.items():
            if task is None:
                status = "‚ö™ not started"
            elif task.cancelled():
                status = "‚ùå cancelled"
            elif task.done():
                exc = task.exception()
                status = f"üí• error: {exc}" if exc else "‚úÖ done"
            else:
                status = "üü¢ running"
            lines.append(f"{name:<20} {status}")
        self.update("\n".join(lines) or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")


class TUIOrchestrator(App):
    BINDINGS = [
        ("ctrl+u", "toggle_ui", "–°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å UI"),
        ("q", "quit", "–í—ã—Ö–æ–¥"),
    ]

    CSS_PATH = None  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –ø–æ–∑–∂–µ

    def __init__(self, orchestrator):
        super().__init__()
        self.orchestrator = orchestrator
        self.status = TaskStatus()
        self.ui_visible = True

    async def on_mount(self):
        # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        await self.update_status_task()
        # –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.set_interval(5, self.update_status_task)

    async def update_status_task(self):
        task_map = {
            "order_task":     getattr(self.orchestrator, "order_task",     None),
            "prehedge_task":  getattr(self.orchestrator, "prehedge_task",  None),
            "snapshot_task":  getattr(self.orchestrator, "snapshot_task",  None),
            "reinvest_task":  getattr(self.orchestrator, "_reinvest_task",  None),
            # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }
        self.status.update_status(task_map)

    def compose(self) -> ComposeResult:
        yield Header()
        yield Container(
            self.status,
            Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", id="refresh-btn"),
            Button("üö™ –í—ã—Ö–æ–¥", id="exit-btn"),
        )
        yield Footer()

    async def on_button_pressed(self, event):
        if event.button.id == "refresh-btn":
            await self.update_status_task()
        elif event.button.id == "exit-btn":
            await self.action_quit()

    async def action_toggle_ui(self):
        """
        –°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç UI.
        –ü—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞,
        –ø—Ä–∏ –ø–æ–∫–∞–∑–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ.
        """
        if self.ui_visible:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
            self.exit_alternate_screen()
            print("üîß UI –æ—Ç–∫–ª—é—á—ë–Ω. –õ–æ–≥–∏ –∏ print() —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.")
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI
            self.enter_alternate_screen()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            await self.update_status_task()
            self.refresh()
        self.ui_visible = not self.ui_visible


async def run_async_ui(orchestrator):
    app = TUIOrchestrator(orchestrator)
    await app.run_async()
